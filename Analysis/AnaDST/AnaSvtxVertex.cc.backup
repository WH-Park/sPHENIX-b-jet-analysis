////////////////////////////////////////////////////////////////////////////////
//
// This module is desgined to grab svtx tracks and put truth and cluster
// information into a TTree for GenFit testing
//
////////////////////////////////////////////////////////////////////////////////
//
// Darren McGlinchey
// 1 Apr 2016
//
////////////////////////////////////////////////////////////////////////////////


#include "AnaSvtxVertex.h"

#include <phool/phool.h>
#include <phool/getClass.h>
#include <g4main/PHG4HitContainer.h>
#include <g4main/PHG4TruthInfoContainer.h>
#include <g4main/PHG4Particle.h>
#include <g4main/PHG4Hit.h>
#include <g4main/PHG4VtxPoint.h>
#include <fun4all/PHTFileServer.h>
#include <fun4all/Fun4AllServer.h>

#include <trackbase_historic/SvtxVertexMap.h>
#include <trackbase_historic/SvtxVertex.h>
#include <trackbase_historic/SvtxTrackMap.h>
#include <trackbase_historic/SvtxTrack.h>
//#include <trackbase_historic/SvtxClusterMap.h>
//#include <trackbase_historic/SvtxCluster.h>
//#include <trackbase_historic/SvtxHitMap.h>
//#include <trackbase_historic/SvtxHit.h>

#include <g4eval/SvtxEvalStack.h>
#include <g4eval/SvtxTrackEval.h>
#include <g4eval/SvtxClusterEval.h>
#include <g4eval/SvtxTruthEval.h>
#include <g4eval/SvtxVertexEval.h>
#include <g4eval/SvtxHitEval.h>

#include <g4jets/JetMap.h>
#include <g4jets/Jet.h>

#include <TTree.h>
#include <TVector3.h>
#include <phhepmc/PHHepMCGenEventMap.h>
#include <phhepmc/PHHepMCGenEvent.h>
#include <HepMC/GenEvent.h>
#include <HepMC/GenVertex.h>
#include <HepMC/GenParticle.h>

//#include <HFJetTruthGeneration/HFJetDefs.h>

#include <iostream>

using namespace std;

//----------------------------------------------------------------------------//
//-- Constructor:
//--  simple initialization
//----------------------------------------------------------------------------//
AnaSvtxVertex::AnaSvtxVertex(const string &name):
  SubsysReco( name ),
  _events( NULL )
{
  //initialize
  _event = 0;
  _outfile = "AnaSvtxVertex.root";

	_truth_container = NULL;
	_hepmc_event_map = NULL;
	_vtxmap_rave = NULL;
	_vtxmap_acts = NULL;
	_vtxmap_refit_filter = NULL;
	_vtxmap_refit_chi2_cut = NULL;
	_vtxmap_refit_multi = NULL;
	_vtxmap_refit_jet04 = NULL;
	_vtxmap_refit_jet04_pT05 = NULL;
	_vtxmap_refit_jet04_pT10 = NULL;
	_vtxmap_refit_jet04_pT15 = NULL;
	_vtxmap_refit_jet04_pT20 = NULL;

	_vtxmap_refit_jet04_chi2 = NULL;
	_vtxmap_refit_jet04_chi2_pT05 = NULL;
	_vtxmap_refit_jet04_chi2_pT10 = NULL;
	_vtxmap_refit_jet04_chi2_pT15 = NULL;
	_vtxmap_refit_jet04_chi2_pT20 = NULL;
	_trkmap = NULL;
	_trkmap_refit = NULL;
	_svtxevalstack = NULL;
	_jetmap04 = NULL;
	_jetmap10 = NULL;

}

//----------------------------------------------------------------------------//
//-- Init():
//--   Intialize all histograms, trees, and ntuples
//----------------------------------------------------------------------------//
int AnaSvtxVertex::Init(PHCompositeNode *topNode)
{
  cout << PHWHERE << " Openning file " << _outfile << endl;
  PHTFileServer::get().open( _outfile, "RECREATE");

  // create TTree
  _events = new TTree("events", "Svtx Event");
  _events->Branch("event",0,"event/I");
	/*
	_events->Branch("npart",0,"npart/I");
	_events->Branch("gen_pid",0,"gen_pid[npart]/I");
	_events->Branch("gen_status",0,"gen_status[npart]/I");
	_events->Branch("gen_prod_x",0,"gen_prod_x[npart]/F");
	_events->Branch("gen_prod_y",0,"gen_prod_y[npart]/F");
	_events->Branch("gen_prod_z",0,"gen_prod_z[npart]/F");
	_events->Branch("gen_prod_id",0,"gen_prod_id[npart]/I");
	_events->Branch("gen_end_x",0,"gen_end_x[npart]/F");
	_events->Branch("gen_end_y",0,"gen_end_y[npart]/F");
	_events->Branch("gen_end_z",0,"gen_end_z[npart]/F");
	_events->Branch("gen_end_id",0,"gen_end_id[npart]/I");
	_events->Branch("gen_px",0,"gen_px[npart]/F");
	_events->Branch("gen_py",0,"gen_py[npart]/F");
	_events->Branch("gen_pz",0,"gen_pz[npart]/F");
	*/

	/*
	_events->Branch("ntrack_reco",0,"ntrack_reco/I");
	_events->Branch("trk_reco_quality",0,"trk_reco_quality[ntrack_reco]/F");
	_events->Branch("trk_reco_px",0,"trk_reco_px[ntrack_reco]/F");
	_events->Branch("trk_reco_py",0,"trk_reco_py[ntrack_reco]/F");
	_events->Branch("trk_reco_pz",0,"trk_reco_pz[ntrack_reco]/F");

	_events->Branch("ntrack",0,"ntrack/I");
	_events->Branch("trk_id",0,"trk_id[ntrack]/I");
	//_events->Branch("trk_x",0,"trk_x[ntrack]/F");
	//_events->Branch("trk_y",0,"trk_y[ntrack]/F");
	//_events->Branch("trk_z",0,"trk_z[ntrack]/F");
	_events->Branch("trk_quality",0,"trk_quality[ntrack]/F");
	_events->Branch("trk_px",0,"trk_px[ntrack]/F");
	_events->Branch("trk_py",0,"trk_py[ntrack]/F");
	_events->Branch("trk_pz",0,"trk_pz[ntrack]/F");
	_events->Branch("trk_mc_pid",0,"trk_mc_pid[ntrack]/I");
	//_events->Branch("trk_mc_p_pid",0,"trk_mc_p_pid[ntrack]/I");
	//_events->Branch("trk_mc_x",0,"trk_mc_x[ntrack]/F");
	//_events->Branch("trk_mc_y",0,"trk_mc_y[ntrack]/F");
	//_events->Branch("trk_mc_z",0,"trk_mc_z[ntrack]/F");
	_events->Branch("trk_mc_px",0,"trk_mc_px[ntrack]/F");
	_events->Branch("trk_mc_py",0,"trk_mc_py[ntrack]/F");
	_events->Branch("trk_mc_pz",0,"trk_mc_pz[ntrack]/F");
	_events->Branch("trk_mc_e",0,"trk_mc_e[ntrack]/F");
	*/

	_events->Branch("vtx_gen",0,"vtx_gen[3]/F");

	_events->Branch("nvertex_reco",0,"nvertex_reco/I");
	_events->Branch("vtx_reco",0,"vtx_reco[nvertex_reco][3]/F");
	_events->Branch("vtx_reco_err",0,"vtx_reco_err[nvertex_reco][3]/F");
	_events->Branch("vtx_reco_ntrack",0,"vtx_reco_ntrack[nvertex_reco]/I");

	_events->Branch("nvertex_rave",0,"nvertex_rave/I");
	_events->Branch("vtx_rave",0,"vtx_rave[nvertex_rave][3]/F");
	_events->Branch("vtx_rave_err",0,"vtx_rave_err[nvertex_rave][3]/F");
	_events->Branch("vtx_rave_ntrack",0,"vtx_rave_ntrack[nvertex_rave]/I");

	_events->Branch("nvertex_acts",0,"nvertex_acts/I");
	_events->Branch("vtx_acts",0,"vtx_acts[nvertex_acts][3]/F");
	_events->Branch("vtx_acts_err",0,"vtx_acts_err[nvertex_acts][3]/F");
	_events->Branch("vtx_acts_ntrack",0,"vtx_acts_ntrack[nvertex_acts]/I");

	/*
	_events->Branch("vtx_rave_trk_id",0,"vtx_rave_trk_id[nvertex_rave][2000]/I");

	_events->Branch("nvertex_rave_filter",0,"nvertex_rave_filter/I");
	_events->Branch("vtx_rave_filter",0,"vtx_rave_filter[nvertex_rave_filter][3]/F");
	_events->Branch("vtx_rave_filter_err",0,"vtx_rave_filter_err[nvertex_rave_filter][3]/F");
	_events->Branch("vtx_rave_filter_ntrack",0,"vtx_rave_filter_ntrack[nvertex_rave_filter]/I");
	_events->Branch("vtx_rave_filter_trk_id",0,"vtx_rave_filter_trk_id[nvertex_rave_filter][2000]/I");
	*/
	//
	//_events->Branch("nvertex_multi",0,"nvertex_multi/I");

	/*
	_events->Branch("nvertex_jet04",0,"nvertex_jet04/I");
	_events->Branch("vtx_reco_jet04_id",0,"vtx_reco_jet04_id[nvertex_jet04]/I");
	_events->Branch("vtx_reco_jet04_ntrk",0,"vtx_reco_jet04_ntrk[nvertex_jet04]/I");
	_events->Branch("vtx_reco_jet04_trkid",0,"vtx_reco_jet04_trkid[nvertex_jet04][100]/I");
	_events->Branch("vtx_reco_jet04",0,"vtx_reco_jet04[nvertex_jet04][3]/F");
	_events->Branch("vtx_reco_jet04_err",0,"vtx_reco_jet04_err[nvertex_jet04][3]/F");
	_events->Branch("vtx_reco_jet04_mass",0,"vtx_reco_jet04_mass[nvertex_jet04]/F");
	//_events->Branch("vtx_reco_jet04_chi2pdf",0,"vtx_reco_jet04_chi2pdf[nvertex_jet04]/F");
	//_events->Branch("vtx_reco_jet04_mass_mc",0,"vtx_reco_jet04_mass_mc[nvertex_jet04]/F");

	_events->Branch("nvertex_jet04_pT05",0,"nvertex_jet04_pT05/I");
	_events->Branch("vtx_reco_jet04_pT05_id",0,"vtx_reco_jet04_pT05_id[nvertex_jet04_pT05]/I");
	_events->Branch("vtx_reco_jet04_pT05_ntrk",0,"vtx_reco_jet04_pT05_ntrk[nvertex_jet04_pT05]/I");
	_events->Branch("vtx_reco_jet04_pT05_trkid",0,"vtx_reco_jet04_pT05_trkid[nvertex_jet04_pT05][100]/I");
	_events->Branch("vtx_reco_jet04_pT05",0,"vtx_reco_jet04_pT05[nvertex_jet04_pT05][3]/F");
	_events->Branch("vtx_reco_jet04_pT05_err",0,"vtx_reco_jet04_pT05_err[nvertex_jet04_pT05][3]/F");
	_events->Branch("vtx_reco_jet04_pT05_mass",0,"vtx_reco_jet04_pT05_mass[nvertex_jet04_pT05]/F");

	_events->Branch("nvertex_jet04_pT10",0,"nvertex_jet04_pT10/I");
	_events->Branch("vtx_reco_jet04_pT10_id",0,"vtx_reco_jet04_pT10_id[nvertex_jet04_pT10]/I");
	_events->Branch("vtx_reco_jet04_pT10_ntrk",0,"vtx_reco_jet04_pT10_ntrk[nvertex_jet04_pT10]/I");
	_events->Branch("vtx_reco_jet04_pT10_trkid",0,"vtx_reco_jet04_pT10_trkid[nvertex_jet04_pT10][100]/I");
	_events->Branch("vtx_reco_jet04_pT10",0,"vtx_reco_jet04_pT10[nvertex_jet04_pT10][3]/F");
	_events->Branch("vtx_reco_jet04_pT10_err",0,"vtx_reco_jet04_pT10_err[nvertex_jet04_pT10][3]/F");
	_events->Branch("vtx_reco_jet04_pT10_mass",0,"vtx_reco_jet04_pT10_mass[nvertex_jet04_pT10]/F");

	_events->Branch("nvertex_jet04_pT15",0,"nvertex_jet04_pT15/I");
	_events->Branch("vtx_reco_jet04_pT15_id",0,"vtx_reco_jet04_pT15_id[nvertex_jet04_pT15]/I");
	_events->Branch("vtx_reco_jet04_pT15_ntrk",0,"vtx_reco_jet04_pT15_ntrk[nvertex_jet04_pT15]/I");
	_events->Branch("vtx_reco_jet04_pT15_trkid",0,"vtx_reco_jet04_pT15_trkid[nvertex_jet04_pT15][100]/I");
	_events->Branch("vtx_reco_jet04_pT15",0,"vtx_reco_jet04_pT15[nvertex_jet04_pT15][3]/F");
	_events->Branch("vtx_reco_jet04_pT15_err",0,"vtx_reco_jet04_pT15_err[nvertex_jet04_pT15][3]/F");
	_events->Branch("vtx_reco_jet04_pT15_mass",0,"vtx_reco_jet04_pT15_mass[nvertex_jet04_pT15]/F");

	_events->Branch("nvertex_jet04_pT20",0,"nvertex_jet04_pT20/I");
	_events->Branch("vtx_reco_jet04_pT20_id",0,"vtx_reco_jet04_pT20_id[nvertex_jet04_pT20]/I");
	_events->Branch("vtx_reco_jet04_pT20_ntrk",0,"vtx_reco_jet04_pT20_ntrk[nvertex_jet04_pT20]/I");
	_events->Branch("vtx_reco_jet04_pT20_trkid",0,"vtx_reco_jet04_pT20_trkid[nvertex_jet04_pT20][100]/I");
	_events->Branch("vtx_reco_jet04_pT20",0,"vtx_reco_jet04_pT20[nvertex_jet04_pT20][3]/F");
	_events->Branch("vtx_reco_jet04_pT20_err",0,"vtx_reco_jet04_pT20_err[nvertex_jet04_pT20][3]/F");
	_events->Branch("vtx_reco_jet04_pT20_mass",0,"vtx_reco_jet04_pT20_mass[nvertex_jet04_pT20]/F");

	_events->Branch("nvertex_jet04_chi2",0,"nvertex_jet04_chi2/I");
	_events->Branch("vtx_reco_jet04_chi2_id",0,"vtx_reco_jet04_chi2_id[nvertex_jet04_chi2]/I");
	_events->Branch("vtx_reco_jet04_chi2_ntrk",0,"vtx_reco_jet04_chi2_ntrk[nvertex_jet04_chi2]/I");
	_events->Branch("vtx_reco_jet04_chi2_trkid",0,"vtx_reco_jet04_chi2_trkid[nvertex_jet04_chi2][100]/I");
	_events->Branch("vtx_reco_jet04_chi2",0,"vtx_reco_jet04_chi2[nvertex_jet04_chi2][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_err",0,"vtx_reco_jet04_chi2_err[nvertex_jet04_chi2][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_mass",0,"vtx_reco_jet04_chi2_mass[nvertex_jet04_chi2]/F");

	_events->Branch("nvertex_jet04_chi2_pT05",0,"nvertex_jet04_chi2_pT05/I");
	_events->Branch("vtx_reco_jet04_chi2_pT05_id",0,"vtx_reco_jet04_chi2_pT05_id[nvertex_jet04_chi2_pT05]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT05_ntrk",0,"vtx_reco_jet04_chi2_pT05_ntrk[nvertex_jet04_chi2_pT05]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT05_trkid",0,"vtx_reco_jet04_chi2_pT05_trkid[nvertex_jet04_chi2_pT05][100]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT05",0,"vtx_reco_jet04_chi2_pT05[nvertex_jet04_chi2_pT05][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT05_err",0,"vtx_reco_jet04_chi2_pT05_err[nvertex_jet04_chi2_pT05][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT05_mass",0,"vtx_reco_jet04_chi2_pT05_mass[nvertex_jet04_chi2_pT05]/F");

	_events->Branch("nvertex_jet04_chi2_pT10",0,"nvertex_jet04_chi2_pT10/I");
	_events->Branch("vtx_reco_jet04_chi2_pT10_id",0,"vtx_reco_jet04_chi2_pT10_id[nvertex_jet04_chi2_pT10]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT10_ntrk",0,"vtx_reco_jet04_chi2_pT10_ntrk[nvertex_jet04_chi2_pT10]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT10_trkid",0,"vtx_reco_jet04_chi2_pT10_trkid[nvertex_jet04_chi2_pT10][100]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT10",0,"vtx_reco_jet04_chi2_pT10[nvertex_jet04_chi2_pT10][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT10_err",0,"vtx_reco_jet04_chi2_pT10_err[nvertex_jet04_chi2_pT10][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT10_mass",0,"vtx_reco_jet04_chi2_pT10_mass[nvertex_jet04_chi2_pT10]/F");

	_events->Branch("nvertex_jet04_chi2_pT15",0,"nvertex_jet04_chi2_pT15/I");
	_events->Branch("vtx_reco_jet04_chi2_pT15_id",0,"vtx_reco_jet04_chi2_pT15_id[nvertex_jet04_chi2_pT15]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT15_ntrk",0,"vtx_reco_jet04_chi2_pT15_ntrk[nvertex_jet04_chi2_pT15]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT15_trkid",0,"vtx_reco_jet04_chi2_pT15_trkid[nvertex_jet04_chi2_pT15][100]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT15",0,"vtx_reco_jet04_chi2_pT15[nvertex_jet04_chi2_pT15][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT15_err",0,"vtx_reco_jet04_chi2_pT15_err[nvertex_jet04_chi2_pT15][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT15_mass",0,"vtx_reco_jet04_chi2_pT15_mass[nvertex_jet04_chi2_pT15]/F");

	_events->Branch("nvertex_jet04_chi2_pT20",0,"nvertex_jet04_chi2_pT20/I");
	_events->Branch("vtx_reco_jet04_chi2_pT20_id",0,"vtx_reco_jet04_chi2_pT20_id[nvertex_jet04_chi2_pT20]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT20_ntrk",0,"vtx_reco_jet04_chi2_pT20_ntrk[nvertex_jet04_chi2_pT20]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT20_trkid",0,"vtx_reco_jet04_chi2_pT20_trkid[nvertex_jet04_chi2_pT20][100]/I");
	_events->Branch("vtx_reco_jet04_chi2_pT20",0,"vtx_reco_jet04_chi2_pT20[nvertex_jet04_chi2_pT20][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT20_err",0,"vtx_reco_jet04_chi2_pT20_err[nvertex_jet04_chi2_pT20][3]/F");
	_events->Branch("vtx_reco_jet04_chi2_pT20_mass",0,"vtx_reco_jet04_chi2_pT20_mass[nvertex_jet04_chi2_pT20]/F");
	*/

	/*
	_events->Branch("nvertex_jet10",0,"nvertex_jet10/I");
	_events->Branch("vtx_reco_jet10_id",0,"vtx_reco_jet10_id[nvertex_jet10]/I");
	_events->Branch("vtx_reco_jet10_ntrk",0,"vtx_reco_jet10_ntrk[nvertex_jet10]/I");
	_events->Branch("vtx_reco_jet10_trkid",0,"vtx_reco_jet10_trkid[nvertex_jet10][30]/I");
	_events->Branch("vtx_reco_jet10",0,"vtx_reco_jet10[nvertex_jet10][3]/F");
	_events->Branch("vtx_reco_jet10_err",0,"vtx_reco_jet10_err[nvertex_jet10][3]/F");
	_events->Branch("vtx_reco_jet10_chi2pdf",0,"vtx_reco_jet10_chi2pdf[nvertex_jet10]/F");
	_events->Branch("vtx_reco_jet10_mass",0,"vtx_reco_jet10_mass[nvertex_jet10]/F");
	_events->Branch("vtx_reco_jet10_mass_mc",0,"vtx_reco_jet10_mass_mc[nvertex_jet10]/F");
	*/

	/*
	_events->Branch("nvertex_jet_iter",0,"nvertex_jet_iter/I");
	_events->Branch("vtx_reco_iter_jetid",0,"vtx_reco_iter_jetid[nvertex_jet_iter]/I");
	_events->Branch("vtx_reco_iter_jet_ntrk",0,"vtx_reco_iter_jet_ntrk[nvertex_jet_iter]/I");
	_events->Branch("vtx_reco_iter_jet_trkid",0,"vtx_reco_iter_jet_trkid[nvertex_jet_iter][30]/I");
	_events->Branch("vtx_reco_iter_jet",0,"vtx_reco_iter_jet[nvertex_jet_iter][3]/F");
	_events->Branch("vtx_reco_iter_jet_err",0,"vtx_reco_iter_jet_err[nvertex_jet_iter][3]/F");
	_events->Branch("vtx_reco_iter_jet_mass",0,"vtx_reco_iter_jet_mass[nvertex_jet_iter]/F");
	*/

	/*
	_events->Branch("njet04",0,"njet04/I");
	_events->Branch("jet04_id",0,"jet04_id[njet04]/I");
	_events->Branch("jet04_property",0,"jet04_property[njet04][2]/I");
	_events->Branch("jet04_pT",0,"jet04_pT[njet04]/F");
	_events->Branch("jet04_phi",0,"jet04_phi[njet04]/F");
	_events->Branch("jet04_eta",0,"jet04_eta[njet04]/F");
	*/

	/*
	_events->Branch("njet10",0,"njet10/I");
	_events->Branch("jet10_id",0,"jet10_id[njet10]/I");
	_events->Branch("jet10_property",0,"jet10_property[njet10][2]/I");
	_events->Branch("jet10_pT",0,"jet10_pT[njet10]/F");
	_events->Branch("jet10_eta",0,"jet10_eta[njet10]/F");
	*/

  return 0;
}

//----------------------------------------------------------------------------//
//-- process_event():
//--   Call user instructions for every event.
//--   This function contains the analysis structure.
//----------------------------------------------------------------------------//
int AnaSvtxVertex::process_event(PHCompositeNode *topNode)
{
  _event++;
  if (_event % 1000 == 0)
    cout << PHWHERE << "Events processed: " << _event << endl;

  GetNodes(topNode);

	/*
  if (!_svtxevalstack) {
    _svtxevalstack = new SvtxEvalStack(topNode);
    _svtxevalstack->set_strict(false);
    //_svtxevalstack->set_verbosity(verbosity + 1);
  } else {
    _svtxevalstack->next_event(topNode);
  }
	*/

	fill_tree(topNode);

  return 0;
}

//----------------------------------------------------------------------------//
//-- End():
//--   End method, wrap everything up
//----------------------------------------------------------------------------//
int AnaSvtxVertex::End(PHCompositeNode *topNode)
{

	cout << "-----AnaSvtxVertex::End------" << endl;

  PHTFileServer::get().cd( _outfile );
  _events->Write();
  //PHTFileServer::get().close();

	//if ( trutheval ) trutheval->Delete();
	//if ( trackeval ) trackeval->Delete();

  return 0;
}


//----------------------------------------------------------------------------//
//-- fill_tree():
//--   Fill the trees with truth, track fit, and cluster information
//----------------------------------------------------------------------------//
void AnaSvtxVertex::fill_tree(PHCompositeNode *topNode)
{

  // Make sure to reset all the TTree variables before trying to set them.
  reset_variables();

	//SvtxTrackEval *trackeval = _svtxevalstack->get_track_eval();
	//SvtxTruthEval *trutheval = _svtxevalstack->get_truth_eval();

	int npart = 0;
	int ntrack_reco = 0;
	//int ntrack = 0;
	int nvertex_reco = 0;
	int nvertex_rave = 0;
	int nvertex_acts = 0;
	//int nvertex_rave_filter = 0;
	//int nvertex_multi = 0;
	//int nvertex_jet04 = 0;
	//int nvertex_jet04_pT05 = 0;
	//int nvertex_jet04_pT10 = 0;
	//int nvertex_jet04_pT15 = 0;
	//int nvertex_jet04_pT20 = 0;

	//int nvertex_jet04_chi2 = 0;
	//int nvertex_jet04_chi2_pT05 = 0;
	//int nvertex_jet04_chi2_pT10 = 0;
	//int nvertex_jet04_chi2_pT15 = 0;
	//int nvertex_jet04_chi2_pT20 = 0;

	//int nvertex_jet10 = 0;
	//int nvertex_jet_iter = 0;

	//cout << "-EVENT: " << _event << "---------------------------------------------------------------------------------------------------" << endl;

	//if ( _hepmc_event ){
	if ( 0 ){

		//HepMC::GenEvent *hepmc_evt = _hepmc_event->getEvent();
		HepMC::GenEvent *hepmc_evt = NULL;

		if ( !hepmc_evt ){
			cout << PHWHERE << " HpeMC::GenEvent node not found on node tree" << endl;
		}

		for ( HepMC::GenEvent::particle_iterator p=hepmc_evt->particles_begin(); p!=hepmc_evt->particles_end(); ++p ){   

			HepMC::GenParticle *part = hepmc_evt->barcode_to_particle((*p)->barcode());

			int tmp_pid = part->pdg_id();
			int tmp_status = part->status();
			//int tmp_barcode = part->barcode();

			if ( tmp_pid==22 || tmp_pid==2112 || tmp_pid==111 ) continue;
			if ( abs(tmp_pid)<10 ) continue;
			//if ( tmp_status!=1 && tmp_status!=2 ) continue;

			if ( !(abs(part->pdg_id())==511 || abs(part->pdg_id())==521 || abs(part->pdg_id())==531 || abs(part->pdg_id())==541) ){
				//continue;
			}

			HepMC::GenVertex* prod_vtx = part->production_vertex();
			HepMC::GenVertex* end_vtx = part->end_vertex();

			//if ( fabs(end_vtx->position().z())<1e-5 ) continue;

			gen_px[npart] = part->momentum().x();
			gen_py[npart] = part->momentum().y();
			gen_pz[npart] = part->momentum().z();

			//if ( !prod_vtx || !end_vtx ) continue;

			//cout << "PID: " << tmp_pid << ", STATUS: " << tmp_status << ", BARCODE: " << tmp_barcode << endl;

			//if ( (end_vtx->position().z()<-900) && (fabs(prod_vtx->position().z())<1e-5) ) continue;

			gen_pid[npart] = tmp_pid;
			gen_status[npart] = tmp_status;

			if ( prod_vtx ){
				/*
				cout 
					<< "PROD ID: " << npart 
					<< ", PID: " << part->pdg_id() 
					<< ", X: " << part->production_vertex()->position().x()
					<< ", Y: " << part->production_vertex()->position().y()
					<< ", Z: " << part->production_vertex()->position().z()
					<< endl;
				*/
				gen_prod_x[npart] = (prod_vtx->position().x())/10.;
				gen_prod_y[npart] = (prod_vtx->position().y())/10.;
				gen_prod_z[npart] = (prod_vtx->position().z())/10.;
				gen_prod_id[npart] = prod_vtx->id();

			}

			if ( end_vtx ){
				/*
				cout 
					<< "END ID: " << npart 
					<< ", PID: " << part->pdg_id() 
					<< ", X: " << part->end_vertex()->position().x()
					<< ", Y: " << part->end_vertex()->position().y()
					<< ", Z: " << part->end_vertex()->position().z()
					<< endl;
				*/
				gen_end_x[npart] = (end_vtx->position().x())/10.;
				gen_end_y[npart] = (end_vtx->position().y())/10.;
				gen_end_z[npart] = (end_vtx->position().z())/10.;
				gen_end_id[npart] = end_vtx->id();
			}

			npart++;

			if ( npart>=1000 ) break;

		}//particle 
	}//hepmc_event

	/*
	//if ( !_hepmc_event && _truth_container ){
	if ( 0 ){

		PHG4TruthInfoContainer::ConstRange range =  _truth_container->GetPrimaryParticleRange();

		for (PHG4TruthInfoContainer::ConstIterator iter=range.first; iter!=range.second; ++iter)
		{

			PHG4Particle *g4particle = iter->second;
			PHG4VtxPoint *vtx = trutheval->get_vertex(g4particle);

			gen_pid[npart]  = g4particle->get_pid();
			gen_prod_x[npart] = vtx->get_x();
			gen_prod_y[npart] = vtx->get_y();
			gen_prod_z[npart] = vtx->get_z();

			npart++;
		}
	}//truth_container
	*/

	//if ( _trkmap ){
	if ( 0 ){
		for (SvtxTrackMap::ConstIter iter=_trkmap->begin(); iter!=_trkmap->end(); ++iter){
			SvtxTrack *svtx_trk = iter->second;

			trk_reco_quality[ntrack_reco] = svtx_trk->get_quality();
			trk_reco_px[ntrack_reco] = svtx_trk->get_px();
			trk_reco_py[ntrack_reco] = svtx_trk->get_py();
			trk_reco_pz[ntrack_reco] = svtx_trk->get_pz();
			ntrack_reco++;

			if ( ntrack_reco>=2000 ) break;
		}
	}

	/*
	//if ( _trkmap_refit ){
	if ( 0 ){
		for (SvtxTrackMap::ConstIter iter=_trkmap_refit->begin(); iter!=_trkmap_refit->end(); ++iter){

			SvtxTrack *trk_refit = iter->second;

			trk_id[ntrack] = trk_refit->get_id();
			trk_chi2pdf[ntrack] = trk_refit->get_chisq()/trk_refit->get_ndf();
			trk_quality[ntrack] = trk_refit->get_quality();

			trk_x[ntrack] = trk_refit->get_x();
			trk_y[ntrack] = trk_refit->get_y();
			trk_z[ntrack] = trk_refit->get_z();
			trk_px[ntrack] = trk_refit->get_px();
			trk_py[ntrack] = trk_refit->get_py();
			trk_pz[ntrack] = trk_refit->get_pz();

			PHG4Particle *best_mc = trackeval->max_truth_particle_by_nclusters(trk_refit);

			if ( best_mc ){
				trk_mc_p_pid[ntrack] = best_mc->get_parent_id();
				trk_mc_pid[ntrack] = best_mc->get_pid();
				trk_mc_px[ntrack] = best_mc->get_px();
				trk_mc_py[ntrack] = best_mc->get_py();
				trk_mc_pz[ntrack] = best_mc->get_pz();
				trk_mc_e[ntrack] = best_mc->get_e();

				//cout << "PID: " << trk_mc_pid[ntrack] << ", P ID: " << trk_mc_p_pid[ntrack] << ", G ID: " << best_mc->get_primary_id() << endl;

				if ( _truth_container ){
					int vtx_id = best_mc->get_vtx_id();
					PHG4VtxPoint *mc_vtx = _truth_container->GetVtx(vtx_id);
					trk_mc_x[ntrack] = mc_vtx->get_x(); 
					trk_mc_y[ntrack] = mc_vtx->get_y(); 
					trk_mc_z[ntrack] = mc_vtx->get_z(); 
				}
			}//best_mc

			ntrack++;

			if ( ntrack>=2000 ) break;
		}
		//cout << "-------------------------------------------------------------" << endl;
	}//trkmap_refit
	*/

	//if ( _hepmc_event_map ){
	if ( 0 ){

		for (PHHepMCGenEventMap::ConstIter iter=_hepmc_event_map->begin(); iter!=_hepmc_event_map->end(); ++iter){
			const PHHepMCGenEvent *hepmc_event = iter->second;

			float xx = hepmc_event->get_collision_vertex().x();
			float yy = hepmc_event->get_collision_vertex().y();
			float zz = hepmc_event->get_collision_vertex().z();

			cout << "VTX GEN, X: " << xx << ", Y: " << yy << ", Z: " << zz << endl;

			vtx_gen[0] = xx;
			vtx_gen[1] = yy;
			vtx_gen[2] = zz;

		}
	}//hepmc_event_map


	if ( _vtxmap ){

		for (SvtxVertexMap::ConstIter iter=_vtxmap->begin(); iter!=_vtxmap->end(); ++iter){
			SvtxVertex *vtx = iter->second;

			vtx_reco[nvertex_reco][0] = vtx->get_x();
			vtx_reco[nvertex_reco][1] = vtx->get_y();
			vtx_reco[nvertex_reco][2] = vtx->get_z();

			vtx_reco_err[nvertex_reco][0] = vtx->get_error(0,0);
			vtx_reco_err[nvertex_reco][1] = vtx->get_error(1,1);
			vtx_reco_err[nvertex_reco][2] = vtx->get_error(2,2);

			vtx_reco_ntrack[nvertex_reco] = vtx->size_tracks();

			cout << "VTX RECO, X: " << vtx_reco[nvertex_reco][0] << ", Y: " << vtx_reco[nvertex_reco][1] << ", Z: " << vtx_reco[nvertex_reco][2] << endl;

			nvertex_reco++;
		}
	}//vtxmap


	if ( _vtxmap_rave ){

		for (SvtxVertexMap::ConstIter iter=_vtxmap_rave->begin(); iter!=_vtxmap_rave->end(); ++iter){

			SvtxVertex *vtx = iter->second;

			vtx_rave[nvertex_rave][0] = vtx->get_x();
			vtx_rave[nvertex_rave][1] = vtx->get_y();
			vtx_rave[nvertex_rave][2] = vtx->get_z();

			vtx_rave_err[nvertex_rave][0] = vtx->get_error(0,0);
			vtx_rave_err[nvertex_rave][1] = vtx->get_error(1,1);
			vtx_rave_err[nvertex_rave][2] = vtx->get_error(2,2);

			vtx_rave_ntrack[nvertex_rave] = vtx->size_tracks();

			cout << "VTX RAVE, X: " << vtx_rave[nvertex_rave][0] << ", Y: " << vtx_rave[nvertex_rave][1] << ", Z: " << vtx_rave[nvertex_rave][2] << endl;

			nvertex_rave++;
		}//vtx_iter
	}//vtxmap_refit

	if ( _vtxmap_acts ){

		for (SvtxVertexMap::ConstIter iter=_vtxmap_acts->begin(); iter!=_vtxmap_acts->end(); ++iter){

			SvtxVertex *vtx = iter->second;

			vtx_acts[nvertex_acts][0] = vtx->get_x();
			vtx_acts[nvertex_acts][1] = vtx->get_y();
			vtx_acts[nvertex_acts][2] = vtx->get_z();

			vtx_acts_err[nvertex_acts][0] = vtx->get_error(0,0);
			vtx_acts_err[nvertex_acts][1] = vtx->get_error(1,1);
			vtx_acts_err[nvertex_acts][2] = vtx->get_error(2,2);

			vtx_acts_ntrack[nvertex_acts] = vtx->size_tracks();

			cout << "VTX ACTS, X: " << vtx_acts[nvertex_acts][0] << ", Y: " << vtx_acts[nvertex_acts][1] << ", Z: " << vtx_acts[nvertex_acts][2] << endl;

			nvertex_acts++;
		}//vtx_iter
	}//vtxmap_refit

	/*
	if ( _vtxmap_refit_jet04 ){
	//if ( 0 ){

		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04->begin(); iter!=_vtxmap_refit_jet04->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_id[nvertex_jet04] = vtx_jet->get_ndof();
			vtx_reco_jet04_chi2pdf[nvertex_jet04] = vtx_jet->get_chisq();
			vtx_reco_jet04[nvertex_jet04][0] = vtx_jet->get_x();
			vtx_reco_jet04[nvertex_jet04][1] = vtx_jet->get_y();
			vtx_reco_jet04[nvertex_jet04][2] = vtx_jet->get_z();

			vtx_reco_jet04_err[nvertex_jet04][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_err[nvertex_jet04][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_err[nvertex_jet04][2] = vtx_jet->get_error(2,2);

			//cout << "VERTEX ID: " << vtx_jet->get_id() << ", NDOF: " << vtx_jet->get_ndof() << endl;
			//cout << "NTRK JET: " << vtx_jet->size_tracks() << endl;

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			float sumE_mc = 0, sumPx_mc = 0, sumPy_mc = 0, sumPz_mc = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				//cout << nvertex_jet04 << ", " << *trk_iter << endl;
				vtx_reco_jet04_trkid[nvertex_jet04][index_trk] = *trk_iter;
				index_trk++;

				float tmp_mc_px = trk_mc_px[*trk_iter];
				float tmp_mc_py = trk_mc_py[*trk_iter];
				float tmp_mc_pz = trk_mc_pz[*trk_iter];
				float tmp_mc_e = trk_mc_e[*trk_iter];
				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				sumE_mc += tmp_mc_e;
				sumPx_mc += tmp_mc_px;
				sumPy_mc += tmp_mc_py;
				sumPz_mc += tmp_mc_pz;

				//cout << "TRK PX: " << trk_px[*trk_iter] << ", PY: " << trk_py[*trk_iter] << ", PZ: " << trk_pz[*trk_iter] << endl; 
				//cout << "MC TRK PX: " << trk_mc_px[*trk_iter] << ", PY: " << trk_mc_py[*trk_iter] << ", PZ: " << trk_mc_pz[*trk_iter] << endl;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_ntrk[nvertex_jet04] = index_trk;
			vtx_reco_jet04_mass[nvertex_jet04] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);
			vtx_reco_jet04_mass_mc[nvertex_jet04] = sqrt(sumE_mc*sumE_mc - sumPx_mc*sumPx_mc - sumPy_mc*sumPy_mc - sumPz_mc*sumPz_mc);

			//cout << "SIZE TRK: " << vtx_jet->size_tracks() << endl;

			nvertex_jet04++;
			if ( nvertex_jet04>=100 ) break;
		}//vtx_iter
	}//vtxmap_refit_jet
	*/

	/*
	if ( _vtxmap_refit_jet04_chi2 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_chi2->begin(); iter!=_vtxmap_refit_jet04_chi2->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_chi2_id[nvertex_jet04_chi2] = vtx_jet->get_ndof();
			vtx_reco_jet04_chi2[nvertex_jet04_chi2][0] = vtx_jet->get_x();
			vtx_reco_jet04_chi2[nvertex_jet04_chi2][1] = vtx_jet->get_y();
			vtx_reco_jet04_chi2[nvertex_jet04_chi2][2] = vtx_jet->get_z();

			vtx_reco_jet04_chi2_err[nvertex_jet04_chi2][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_chi2_err[nvertex_jet04_chi2][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_chi2_err[nvertex_jet04_chi2][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_chi2_trkid[nvertex_jet04_chi2][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_chi2_ntrk[nvertex_jet04_chi2] = index_trk;
			vtx_reco_jet04_chi2_mass[nvertex_jet04_chi2] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_chi2++;
			if ( nvertex_jet04_chi2>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_pT05 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_pT05->begin(); iter!=_vtxmap_refit_jet04_pT05->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_pT05_id[nvertex_jet04_pT05] = vtx_jet->get_ndof();
			vtx_reco_jet04_pT05[nvertex_jet04_pT05][0] = vtx_jet->get_x();
			vtx_reco_jet04_pT05[nvertex_jet04_pT05][1] = vtx_jet->get_y();
			vtx_reco_jet04_pT05[nvertex_jet04_pT05][2] = vtx_jet->get_z();

			vtx_reco_jet04_pT05_err[nvertex_jet04_pT05][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_pT05_err[nvertex_jet04_pT05][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_pT05_err[nvertex_jet04_pT05][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_pT05_trkid[nvertex_jet04_pT05][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_pT05_ntrk[nvertex_jet04_pT05] = index_trk;
			vtx_reco_jet04_pT05_mass[nvertex_jet04_pT05] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_pT05++;
			if ( nvertex_jet04_pT05>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_chi2_pT05 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_chi2_pT05->begin(); iter!=_vtxmap_refit_jet04_chi2_pT05->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_chi2_pT05_id[nvertex_jet04_chi2_pT05] = vtx_jet->get_ndof();
			vtx_reco_jet04_chi2_pT05[nvertex_jet04_chi2_pT05][0] = vtx_jet->get_x();
			vtx_reco_jet04_chi2_pT05[nvertex_jet04_chi2_pT05][1] = vtx_jet->get_y();
			vtx_reco_jet04_chi2_pT05[nvertex_jet04_chi2_pT05][2] = vtx_jet->get_z();

			vtx_reco_jet04_chi2_pT05_err[nvertex_jet04_chi2_pT05][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_chi2_pT05_err[nvertex_jet04_chi2_pT05][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_chi2_pT05_err[nvertex_jet04_chi2_pT05][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_chi2_pT05_trkid[nvertex_jet04_chi2_pT05][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_chi2_pT05_ntrk[nvertex_jet04_chi2_pT05] = index_trk;
			vtx_reco_jet04_chi2_pT05_mass[nvertex_jet04_chi2_pT05] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_chi2_pT05++;
			if ( nvertex_jet04_chi2_pT05>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_pT10 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_pT10->begin(); iter!=_vtxmap_refit_jet04_pT10->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_pT10_id[nvertex_jet04_pT10] = vtx_jet->get_ndof();
			vtx_reco_jet04_pT10[nvertex_jet04_pT10][0] = vtx_jet->get_x();
			vtx_reco_jet04_pT10[nvertex_jet04_pT10][1] = vtx_jet->get_y();
			vtx_reco_jet04_pT10[nvertex_jet04_pT10][2] = vtx_jet->get_z();

			vtx_reco_jet04_pT10_err[nvertex_jet04_pT10][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_pT10_err[nvertex_jet04_pT10][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_pT10_err[nvertex_jet04_pT10][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_pT10_trkid[nvertex_jet04_pT10][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_pT10_ntrk[nvertex_jet04_pT10] = index_trk;
			vtx_reco_jet04_pT10_mass[nvertex_jet04_pT10] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_pT10++;
			if ( nvertex_jet04_pT10>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_chi2_pT10 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_chi2_pT10->begin(); iter!=_vtxmap_refit_jet04_chi2_pT10->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_chi2_pT10_id[nvertex_jet04_chi2_pT10] = vtx_jet->get_ndof();
			vtx_reco_jet04_chi2_pT10[nvertex_jet04_chi2_pT10][0] = vtx_jet->get_x();
			vtx_reco_jet04_chi2_pT10[nvertex_jet04_chi2_pT10][1] = vtx_jet->get_y();
			vtx_reco_jet04_chi2_pT10[nvertex_jet04_chi2_pT10][2] = vtx_jet->get_z();

			vtx_reco_jet04_chi2_pT10_err[nvertex_jet04_chi2_pT10][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_chi2_pT10_err[nvertex_jet04_chi2_pT10][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_chi2_pT10_err[nvertex_jet04_chi2_pT10][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_chi2_pT10_trkid[nvertex_jet04_chi2_pT10][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_chi2_pT10_ntrk[nvertex_jet04_chi2_pT10] = index_trk;
			vtx_reco_jet04_chi2_pT10_mass[nvertex_jet04_chi2_pT10] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_chi2_pT10++;
			if ( nvertex_jet04_chi2_pT10>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_pT15 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_pT15->begin(); iter!=_vtxmap_refit_jet04_pT15->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_pT15_id[nvertex_jet04_pT15] = vtx_jet->get_ndof();
			vtx_reco_jet04_pT15[nvertex_jet04_pT15][0] = vtx_jet->get_x();
			vtx_reco_jet04_pT15[nvertex_jet04_pT15][1] = vtx_jet->get_y();
			vtx_reco_jet04_pT15[nvertex_jet04_pT15][2] = vtx_jet->get_z();

			vtx_reco_jet04_pT15_err[nvertex_jet04_pT15][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_pT15_err[nvertex_jet04_pT15][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_pT15_err[nvertex_jet04_pT15][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_pT15_trkid[nvertex_jet04_pT15][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_pT15_ntrk[nvertex_jet04_pT15] = index_trk;
			vtx_reco_jet04_pT15_mass[nvertex_jet04_pT15] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_pT15++;
			if ( nvertex_jet04_pT15>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_chi2_pT15 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_chi2_pT15->begin(); iter!=_vtxmap_refit_jet04_chi2_pT15->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_chi2_pT15_id[nvertex_jet04_chi2_pT15] = vtx_jet->get_ndof();
			vtx_reco_jet04_chi2_pT15[nvertex_jet04_chi2_pT15][0] = vtx_jet->get_x();
			vtx_reco_jet04_chi2_pT15[nvertex_jet04_chi2_pT15][1] = vtx_jet->get_y();
			vtx_reco_jet04_chi2_pT15[nvertex_jet04_chi2_pT15][2] = vtx_jet->get_z();

			vtx_reco_jet04_chi2_pT15_err[nvertex_jet04_chi2_pT15][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_chi2_pT15_err[nvertex_jet04_chi2_pT15][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_chi2_pT15_err[nvertex_jet04_chi2_pT15][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_chi2_pT15_trkid[nvertex_jet04_chi2_pT15][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_chi2_pT15_ntrk[nvertex_jet04_chi2_pT15] = index_trk;
			vtx_reco_jet04_chi2_pT15_mass[nvertex_jet04_chi2_pT15] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_chi2_pT15++;
			if ( nvertex_jet04_chi2_pT15>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_pT20 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_pT20->begin(); iter!=_vtxmap_refit_jet04_pT20->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_pT20_id[nvertex_jet04_pT20] = vtx_jet->get_ndof();
			vtx_reco_jet04_pT20[nvertex_jet04_pT20][0] = vtx_jet->get_x();
			vtx_reco_jet04_pT20[nvertex_jet04_pT20][1] = vtx_jet->get_y();
			vtx_reco_jet04_pT20[nvertex_jet04_pT20][2] = vtx_jet->get_z();

			vtx_reco_jet04_pT20_err[nvertex_jet04_pT20][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_pT20_err[nvertex_jet04_pT20][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_pT20_err[nvertex_jet04_pT20][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_pT20_trkid[nvertex_jet04_pT20][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_pT20_ntrk[nvertex_jet04_pT20] = index_trk;
			vtx_reco_jet04_pT20_mass[nvertex_jet04_pT20] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_pT20++;
			if ( nvertex_jet04_pT20>=100 ) break;
		}
	}
	*/

	/*
	if ( _vtxmap_refit_jet04_chi2_pT20 ){
		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet04_chi2_pT20->begin(); iter!=_vtxmap_refit_jet04_chi2_pT20->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			vtx_reco_jet04_chi2_pT20_id[nvertex_jet04_chi2_pT20] = vtx_jet->get_ndof();
			vtx_reco_jet04_chi2_pT20[nvertex_jet04_chi2_pT20][0] = vtx_jet->get_x();
			vtx_reco_jet04_chi2_pT20[nvertex_jet04_chi2_pT20][1] = vtx_jet->get_y();
			vtx_reco_jet04_chi2_pT20[nvertex_jet04_chi2_pT20][2] = vtx_jet->get_z();

			vtx_reco_jet04_chi2_pT20_err[nvertex_jet04_chi2_pT20][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet04_chi2_pT20_err[nvertex_jet04_chi2_pT20][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet04_chi2_pT20_err[nvertex_jet04_chi2_pT20][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){

				vtx_reco_jet04_chi2_pT20_trkid[nvertex_jet04_chi2_pT20][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				if ( index_trk>=100 ) break;
			}//trk_iter

			vtx_reco_jet04_chi2_pT20_ntrk[nvertex_jet04_chi2_pT20] = index_trk;
			vtx_reco_jet04_chi2_pT20_mass[nvertex_jet04_chi2_pT20] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			nvertex_jet04_chi2_pT20++;
			if ( nvertex_jet04_chi2_pT20>=100 ) break;
		}
	}
	*/

	/*
	//if ( _vtxmap_refit_jet10 ){
	if ( 0 ){

		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet10->begin(); iter!=_vtxmap_refit_jet10->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			//cout << "VERTEX ID: " << vtx_jet->get_id() << ", NDOF: " << vtx_jet->get_ndof() << endl;

			vtx_reco_jet10_id[nvertex_jet10] = vtx_jet->get_ndof();
			vtx_reco_jet10_chi2pdf[nvertex_jet10] = vtx_jet->get_chisq();
			vtx_reco_jet10[nvertex_jet10][0] = vtx_jet->get_x();
			vtx_reco_jet10[nvertex_jet10][1] = vtx_jet->get_y();
			vtx_reco_jet10[nvertex_jet10][2] = vtx_jet->get_z();

			vtx_reco_jet10_err[nvertex_jet10][0] = vtx_jet->get_error(0,0);
			vtx_reco_jet10_err[nvertex_jet10][1] = vtx_jet->get_error(1,1);
			vtx_reco_jet10_err[nvertex_jet10][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			float sumE_mc = 0, sumPx_mc = 0, sumPy_mc = 0, sumPz_mc = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){
				vtx_reco_jet10_trkid[nvertex_jet10][index_trk] = *trk_iter;
				index_trk++;

				float tmp_mc_px = trk_mc_px[*trk_iter];
				float tmp_mc_py = trk_mc_py[*trk_iter];
				float tmp_mc_pz = trk_mc_pz[*trk_iter];
				float tmp_px = trk_px[*trk_iter];
				float tmp_py = trk_py[*trk_iter];
				float tmp_pz = trk_pz[*trk_iter];

				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				sumE_mc += sqrt(tmp_mc_px*tmp_mc_px + tmp_mc_py*tmp_mc_py + tmp_mc_pz*tmp_mc_pz + 0.140*0.140);
				sumPx_mc += tmp_mc_px;
				sumPy_mc += tmp_mc_py;
				sumPz_mc += tmp_mc_pz;

				//cout << "TRK PX: " << trk_px[*trk_iter] << ", PY: " << trk_py[*trk_iter] << ", PZ: " << trk_pz[*trk_iter] << endl; 
				//cout << "MC TRK PX: " << trk_mc_px[*trk_iter] << ", PY: " << trk_mc_py[*trk_iter] << ", PZ: " << trk_mc_pz[*trk_iter] << endl;

				if ( index_trk>=30 ) break;
			}//trk_iter

			vtx_reco_jet10_ntrk[nvertex_jet10] = index_trk;
			vtx_reco_jet10_mass[nvertex_jet10] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);
			vtx_reco_jet10_mass_mc[nvertex_jet10] = sqrt(sumE_mc*sumE_mc - sumPx_mc*sumPx_mc - sumPy_mc*sumPy_mc - sumPz_mc*sumPz_mc);

			//cout << "SIZE TRK: " << vtx_jet->size_tracks() << endl;

			nvertex_jet10++;
		}//vtx_iter
	}//vtxmap_refit_jet
	*/


	/*
	//if ( _vtxmap_refit_jet10_iter ){
	if ( 0 ){

		for (SvtxVertexMap::ConstIter iter=_vtxmap_refit_jet10_iter->begin(); iter!=_vtxmap_refit_jet10_iter->end(); ++iter){

			SvtxVertex *vtx_jet = iter->second;

			cout << "VERTEX ITER ID: " << vtx_jet->get_id() << ", NDOF: " << vtx_jet->get_ndof() << endl;

			vtx_reco_iter_jetid[nvertex_jet_iter] = vtx_jet->get_ndof();
			vtx_reco_iter_jet[nvertex_jet_iter][0] = vtx_jet->get_x();
			vtx_reco_iter_jet[nvertex_jet_iter][1] = vtx_jet->get_y();
			vtx_reco_iter_jet[nvertex_jet_iter][2] = vtx_jet->get_z();

			vtx_reco_iter_jet_err[nvertex_jet_iter][0] = vtx_jet->get_error(0,0);
			vtx_reco_iter_jet_err[nvertex_jet_iter][1] = vtx_jet->get_error(1,1);
			vtx_reco_iter_jet_err[nvertex_jet_iter][2] = vtx_jet->get_error(2,2);

			int index_trk = 0;
			float sumE = 0, sumPx = 0, sumPy = 0, sumPz = 0;
			for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){
				vtx_reco_iter_jet_trkid[nvertex_jet_iter][index_trk] = *trk_iter;
				index_trk++;

				float tmp_px = trk_mc_px[*trk_iter];
				float tmp_py = trk_mc_py[*trk_iter];
				float tmp_pz = trk_mc_pz[*trk_iter];
				sumE += sqrt(tmp_px*tmp_px + tmp_py*tmp_py + tmp_pz*tmp_pz + 0.140*0.140);
				sumPx += tmp_px;
				sumPy += tmp_py;
				sumPz += tmp_pz;

				//cout << "TRK PX: " << trk_px[*trk_iter] << ", PY: " << trk_py[*trk_iter] << ", PZ: " << trk_pz[*trk_iter] << endl; 
				//cout << "MC TRK PX: " << trk_mc_px[*trk_iter] << ", PY: " << trk_mc_py[*trk_iter] << ", PZ: " << trk_mc_pz[*trk_iter] << endl;

				if ( index_trk>=30 ) break;
			}//trk_iter

			vtx_reco_iter_jet_ntrk[nvertex_jet_iter] = index_trk;
			vtx_reco_iter_jet_mass[nvertex_jet_iter] = sqrt(sumE*sumE - sumPx*sumPx - sumPy*sumPy - sumPz*sumPz);

			if ( vtx_reco_iter_jet_mass[nvertex_jet_iter]>0.13 && vtx_reco_iter_jet_mass[nvertex_jet_iter]<0.15 ){
				cout << "#####0.13<2nd VTX MASS<0.15#####" << endl;
				for (SvtxVertex::ConstTrackIter trk_iter=vtx_jet->begin_tracks(); trk_iter!=vtx_jet->end_tracks(); ++trk_iter){
					cout << "MASS PX: " << trk_mc_px[*trk_iter] 
							 << ", PY: " << trk_mc_py[*trk_iter] 
							 << ", PZ: " << trk_mc_pz[*trk_iter] 
							 << ", PID: " << trk_mc_pid[*trk_iter] 
							 << endl;
				}
			}

			cout << "SIZE TRK: " << vtx_jet->size_tracks() << endl;

			nvertex_jet_iter++;

		}
	}//_vtxmap_refit_jet_iter
	*/

	/*
	int njet04 = 0;

	//cout << "# of jets: " << _jetmap04->size() << endl;

	//! check tracks in jet
	if ( _jetmap04 ){
	//if ( 0 ){
		for(JetMap::ConstIter iter = _jetmap04->begin(); iter != _jetmap04->end(); ++iter)
		{
			Jet *jet_true = iter->second;
			if ( jet_true->get_pt()<20.0 ) continue; 
			if ( fabs(jet_true->get_eta())>0.6 ) continue; 

			//cout << "JET04 ID: " << jet_true->get_id() << ", # of comp: " << jet_true->size_comp() << ", pT: " << jet_true->get_pt() << endl;
			jet04_id[njet04] = jet_true->get_id();
			if ( jet_true->has_property(static_cast<Jet::PROPERTY>(prop_JetPartonFlavor)) ){
				jet04_property[njet04][0] = int(jet_true->get_property(static_cast<Jet::PROPERTY>(prop_JetPartonFlavor)));
				jet04_property[njet04][1] = int(jet_true->get_property(static_cast<Jet::PROPERTY>(prop_JetHadronFlavor)));
			}
			jet04_pT[njet04] = jet_true->get_pt();
			jet04_eta[njet04] = jet_true->get_eta();
			jet04_phi[njet04] = jet_true->get_phi();

			njet04++;

			if ( njet04>=100 ) break;
		}//JepMap
	}//_jetmap
	*/

	/*
	int njet10 = 0;

	//! check tracks in jet
	//if ( _jetmap10 ){
	if ( 0 ){
		for(JetMap::ConstIter iter = _jetmap10->begin(); iter != _jetmap10->end(); ++iter)
		{
			Jet *jet_true = iter->second;
			if ( jet_true->get_pt()<20.0 ) continue; 

			cout << "JET10 ID: " << jet_true->get_id() << ", # of comp: " << jet_true->size_comp() << ", pT: " << jet_true->get_pt() << endl;
			jet10_id[njet10] = jet_true->get_id();
			if ( jet_true->has_property(static_cast<Jet::PROPERTY>(prop_JetPartonFlavor)) ){
				jet10_property[njet10][0] = int(jet_true->get_property(static_cast<Jet::PROPERTY>(prop_JetPartonFlavor)));
				jet10_property[njet10][1] = int(jet_true->get_property(static_cast<Jet::PROPERTY>(prop_JetHadronFlavor)));
			}
			jet10_pT[njet10] = jet_true->get_pt();
			jet10_eta[njet10] = jet_true->get_eta();

			njet10++;
		}//JetMap
	}//_jetmap
	*/
	
	int count = 0;
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&_event);
	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&npart);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_pid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_status);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_prod_x);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_prod_y);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_prod_z);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_prod_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_end_x);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_end_y);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_end_z);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_end_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_px);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_py);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(gen_pz);
	*/

	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&ntrack_reco);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_reco_quality);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_reco_px);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_reco_py);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_reco_pz);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&ntrack);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_id);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_x);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_y);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_z);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_quality);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_px);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_py);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_pz);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_pid);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_p_pid);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_x);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_y);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_z);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_px);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_py);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_pz);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(trk_mc_e);
	*/

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_gen);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_reco);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_ntrack);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_rave);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave_ntrack);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_acts);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_acts);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_acts_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_acts_ntrack);

	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave_trk_id);
	//
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_multi);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_rave_filter);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave_filter);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave_filter_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave_filter_ntrack);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_rave_filter_trk_id);
	*/

	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_mass);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2pdf);
	//((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_mass_mc);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_pT05);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT05_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT05_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT05_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT05);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT05_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT05_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_pT10);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT10_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT10_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT10_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT10);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT10_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT10_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_pT15);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT15_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT15_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT15_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT15);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT15_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT15_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_pT20);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT20_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT20_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT20_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT20);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT20_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_pT20_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_chi2);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_chi2_pT05);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT05_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT05_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT05_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT05);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT05_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT05_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_chi2_pT10);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT10_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT10_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT10_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT10);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT10_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT10_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_chi2_pT15);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT15_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT15_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT15_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT15);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT15_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT15_mass);

	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet04_chi2_pT20);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT20_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT20_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT20_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT20);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT20_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet04_chi2_pT20_mass);
	*/

	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet10);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10_chi2pdf);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10_mass);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_jet10_mass_mc);
	*/

	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&nvertex_jet_iter);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_iter_jetid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_iter_jet_ntrk);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_iter_jet_trkid);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_iter_jet);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_iter_jet_err);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(vtx_reco_iter_jet_mass);
	*/

	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&njet04);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet04_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet04_property);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet04_pT);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet04_phi);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet04_eta);
	*/

	/*
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(&njet10);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet10_id);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet10_property);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet10_pT);
	((TBranch*) _events->GetListOfBranches()->At(count++))->SetAddress(jet10_eta);
	*/

	_events->Fill();

  return;

}

//----------------------------------------------------------------------------//
//-- reset_variables():
//--   Reset all the tree variables to their default values.
//--   Needs to be called at the start of every event
//----------------------------------------------------------------------------//
void AnaSvtxVertex::reset_variables()
{

	for (int ii=0; ii<1000; ii++){
		gen_pid[ii] = gen_status[ii] = -999;
		gen_px[ii] = gen_py[ii] = gen_pz[ii] = -999;
		gen_prod_x[ii] = gen_prod_y[ii] = gen_prod_z[ii] = -999;
		gen_end_x[ii] = gen_end_y[ii] = gen_end_z[ii] = -999;
		gen_prod_id[ii] = gen_end_id[ii] = -999;
	}//ii

	for (int ii=0; ii<2000; ii++){
		trk_reco_quality[ii] = -999;
		trk_reco_px[ii] = trk_reco_py[ii] = trk_reco_pz[ii] = -999;

		trk_chi2pdf[ii] = trk_quality[ii] = -999;
		trk_x[ii] = trk_y[ii] = trk_z[ii] = -999;
		trk_px[ii] = trk_py[ii] = trk_pz[ii] = -999;
		trk_mc_px[ii] = trk_mc_py[ii] = trk_mc_pz[ii] = -999;
		trk_mc_e[ii] = -999;
		trk_mc_x[ii] = trk_mc_y[ii] = trk_mc_z[ii] = -999;
		trk_id[ii] = trk_mc_pid[ii] = trk_mc_p_pid[ii] = -999;
	}

	vtx_gen[0] = vtx_gen[1] = vtx_gen[2] = -999;

	for (int ii=0; ii<10; ii++){
		vtx_reco[ii][0] = vtx_reco[ii][1] = vtx_reco[ii][2] = -999;
		vtx_reco_err[ii][0] = vtx_reco_err[ii][1] = vtx_reco_err[ii][2] = -999;

		vtx_rave[ii][0] = vtx_rave[ii][1] = vtx_rave[ii][2] = -999;
		vtx_rave_err[ii][0] = vtx_rave_err[ii][1] = vtx_rave_err[ii][2] = -999;

		vtx_acts[ii][0] = vtx_acts[ii][1] = vtx_acts[ii][2] = -999;
		vtx_acts_err[ii][0] = vtx_acts_err[ii][1] = vtx_acts_err[ii][2] = -999;

		vtx_rave_filter[ii][0] = vtx_rave_filter[ii][1] = vtx_rave_filter[ii][2] = -999;
		vtx_rave_filter_err[ii][0] = vtx_rave_filter_err[ii][1] = vtx_rave_filter_err[ii][2] = -999;

		vtx_reco_ntrack[ii] = vtx_rave_ntrack[ii] = vtx_rave_filter_ntrack[ii] = 0;
		for (int itrk=0; itrk<2000; itrk++){
			vtx_rave_trk_id[ii][itrk] = -999;
			vtx_rave_filter_trk_id[ii][itrk] = -999;
		}//itrk

		vtx_reco_jet10_id[ii] = vtx_reco_jet10_ntrk[ii] = 0;
		vtx_reco_jet10_mass[ii] = vtx_reco_jet10_mass_mc[ii] = 0;
		vtx_reco_jet10[ii][0] = vtx_reco_jet10[ii][1] = vtx_reco_jet10[ii][2] = -999;
		vtx_reco_jet10_err[ii][0] = vtx_reco_jet10_err[ii][1] = vtx_reco_jet10_err[ii][2] = -999;

		vtx_reco_iter_jetid[ii] = vtx_reco_iter_jet_ntrk[ii] = 0;
		vtx_reco_iter_jet_mass[ii] = 0;
		vtx_reco_iter_jet[ii][0] = vtx_reco_iter_jet[ii][1] = vtx_reco_iter_jet[ii][2] = -999;
		vtx_reco_iter_jet_err[ii][0] = vtx_reco_iter_jet_err[ii][1] = vtx_reco_iter_jet_err[ii][2] = -999;

	}//ii

	for (int ii=0; ii<100; ii++){
		jet04_id[ii] = -1;
		jet04_property[ii][0] = jet04_property[ii][1] = -999;
		jet04_pT[ii] = 0.;
		jet04_eta[ii] = -999;

		vtx_reco_jet04_id[ii] = vtx_reco_jet04_ntrk[ii] = 0;
		vtx_reco_jet04_mass[ii] = vtx_reco_jet04_mass_mc[ii] = 0;
		vtx_reco_jet04[ii][0] = vtx_reco_jet04[ii][1] = vtx_reco_jet04[ii][2] = -999;
		vtx_reco_jet04_err[ii][0] = vtx_reco_jet04_err[ii][1] = vtx_reco_jet04_err[ii][2] = -999;

		vtx_reco_jet04_pT05_id[ii] = vtx_reco_jet04_pT05_ntrk[ii] = 0;
		vtx_reco_jet04_pT05_mass[ii] = 0;
		vtx_reco_jet04_pT05[ii][0] = vtx_reco_jet04_pT05[ii][1] = vtx_reco_jet04_pT05[ii][2] = -999;
		vtx_reco_jet04_pT05_err[ii][0] = vtx_reco_jet04_pT05_err[ii][1] = vtx_reco_jet04_pT05_err[ii][2] = -999;

		vtx_reco_jet04_pT10_id[ii] = vtx_reco_jet04_pT10_ntrk[ii] = 0;
		vtx_reco_jet04_pT10_mass[ii] = 0;
		vtx_reco_jet04_pT10[ii][0] = vtx_reco_jet04_pT10[ii][1] = vtx_reco_jet04_pT10[ii][2] = -999;
		vtx_reco_jet04_pT10_err[ii][0] = vtx_reco_jet04_pT10_err[ii][1] = vtx_reco_jet04_pT10_err[ii][2] = -999;

		vtx_reco_jet04_pT15_id[ii] = vtx_reco_jet04_pT15_ntrk[ii] = 0;
		vtx_reco_jet04_pT15_mass[ii] = 0;
		vtx_reco_jet04_pT15[ii][0] = vtx_reco_jet04_pT15[ii][1] = vtx_reco_jet04_pT15[ii][2] = -999;
		vtx_reco_jet04_pT15_err[ii][0] = vtx_reco_jet04_pT15_err[ii][1] = vtx_reco_jet04_pT15_err[ii][2] = -999;

		vtx_reco_jet04_pT20_id[ii] = vtx_reco_jet04_pT20_ntrk[ii] = 0;
		vtx_reco_jet04_pT20_mass[ii] = 0;
		vtx_reco_jet04_pT20[ii][0] = vtx_reco_jet04_pT20[ii][1] = vtx_reco_jet04_pT20[ii][2] = -999;
		vtx_reco_jet04_pT20_err[ii][0] = vtx_reco_jet04_pT20_err[ii][1] = vtx_reco_jet04_pT20_err[ii][2] = -999;

		vtx_reco_jet04_chi2_id[ii] = vtx_reco_jet04_chi2_ntrk[ii] = 0;
		vtx_reco_jet04_chi2_mass[ii] = 0;
		vtx_reco_jet04_chi2[ii][0] = vtx_reco_jet04_chi2[ii][1] = vtx_reco_jet04_chi2[ii][2] = -999;
		vtx_reco_jet04_chi2_err[ii][0] = vtx_reco_jet04_chi2_err[ii][1] = vtx_reco_jet04_chi2_err[ii][2] = -999;

		vtx_reco_jet04_chi2_pT05_id[ii] = vtx_reco_jet04_chi2_pT05_ntrk[ii] = 0;
		vtx_reco_jet04_chi2_pT05_mass[ii] = 0;
		vtx_reco_jet04_chi2_pT05[ii][0] = vtx_reco_jet04_chi2_pT05[ii][1] = vtx_reco_jet04_chi2_pT05[ii][2] = -999;
		vtx_reco_jet04_chi2_pT05_err[ii][0] = vtx_reco_jet04_chi2_pT05_err[ii][1] = vtx_reco_jet04_chi2_pT05_err[ii][2] = -999;

		vtx_reco_jet04_chi2_pT10_id[ii] = vtx_reco_jet04_chi2_pT10_ntrk[ii] = 0;
		vtx_reco_jet04_chi2_pT10_mass[ii] = 0;
		vtx_reco_jet04_chi2_pT10[ii][0] = vtx_reco_jet04_chi2_pT10[ii][1] = vtx_reco_jet04_chi2_pT10[ii][2] = -999;
		vtx_reco_jet04_chi2_pT10_err[ii][0] = vtx_reco_jet04_chi2_pT10_err[ii][1] = vtx_reco_jet04_chi2_pT10_err[ii][2] = -999;

		vtx_reco_jet04_chi2_pT15_id[ii] = vtx_reco_jet04_chi2_pT15_ntrk[ii] = 0;
		vtx_reco_jet04_chi2_pT15_mass[ii] = 0;
		vtx_reco_jet04_chi2_pT15[ii][0] = vtx_reco_jet04_chi2_pT15[ii][1] = vtx_reco_jet04_chi2_pT15[ii][2] = -999;
		vtx_reco_jet04_chi2_pT15_err[ii][0] = vtx_reco_jet04_chi2_pT15_err[ii][1] = vtx_reco_jet04_chi2_pT15_err[ii][2] = -999;

		vtx_reco_jet04_chi2_pT20_id[ii] = vtx_reco_jet04_chi2_pT20_ntrk[ii] = 0;
		vtx_reco_jet04_chi2_pT20_mass[ii] = 0;
		vtx_reco_jet04_chi2_pT20[ii][0] = vtx_reco_jet04_chi2_pT20[ii][1] = vtx_reco_jet04_chi2_pT20[ii][2] = -999;
		vtx_reco_jet04_chi2_pT20_err[ii][0] = vtx_reco_jet04_chi2_pT20_err[ii][1] = vtx_reco_jet04_chi2_pT20_err[ii][2] = -999;

		for (int itrk=0; itrk<100; itrk++){
			vtx_reco_jet04_trkid[ii][itrk] = -999;
			vtx_reco_jet04_pT05_trkid[ii][itrk] = -999;
			vtx_reco_jet04_pT10_trkid[ii][itrk] = -999;
			vtx_reco_jet04_pT15_trkid[ii][itrk] = -999;
			vtx_reco_jet04_pT20_trkid[ii][itrk] = -999;

			vtx_reco_jet04_chi2_trkid[ii][itrk] = -999;
			vtx_reco_jet04_chi2_pT05_trkid[ii][itrk] = -999;
			vtx_reco_jet04_chi2_pT10_trkid[ii][itrk] = -999;
			vtx_reco_jet04_chi2_pT15_trkid[ii][itrk] = -999;
			vtx_reco_jet04_chi2_pT20_trkid[ii][itrk] = -999;
		}//itrk
	}//ii


}

//----------------------------------------------------------------------------//
//-- GetNodes():
//--   Get all the all the required nodes off the node tree
//----------------------------------------------------------------------------//
void AnaSvtxVertex::GetNodes(PHCompositeNode * topNode)
{
  //DST objects
	//
  //PHG4TruthInfoContainer
  _truth_container = findNode::getClass<PHG4TruthInfoContainer>(topNode,"G4TruthInfo");
  if (!_truth_container && _event<2)
  {
    cout << PHWHERE << " PHG4TruthInfoContainer node not found on node tree" << endl;
  }

	//HepMCGenEventMap
	_hepmc_event_map = findNode::getClass<PHHepMCGenEventMap>(topNode,"PHHepMCGenEventMap");
	if (!_hepmc_event_map && _event<2)
	{
		cout << PHWHERE << " PHHepMCGenEventMap node not found on node tree" << endl;
	}

  //SvtxVertexMap
  _vtxmap = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMap");
  if (!_vtxmap && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMap node not found on node tree" << endl;
  }

  //SvtxVertexMap
  _vtxmap_rave = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRave");
  if (!_vtxmap_rave && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRave node not found on node tree" << endl;
  }

  //SvtxVertexMap
  _vtxmap_acts = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapActs");
  if (!_vtxmap_acts && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapActs node not found on node tree" << endl;
  }

	/*
  _vtxmap_refit_filter = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitFilter");
  if (!_vtxmap_refit_filter && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitFilter node not found on node tree" << endl;
  }

  //SvtxVertexMap
  _vtxmap_refit_jet04 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04");
  if (!_vtxmap_refit_jet04 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_pT05 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04pT05");
  if (!_vtxmap_refit_jet04_pT05 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04pT05 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_pT10 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04pT10");
  if (!_vtxmap_refit_jet04_pT10 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04pT10 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_pT15 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04pT15");
  if (!_vtxmap_refit_jet04_pT15 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04pT15 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_pT20 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04pT20");
  if (!_vtxmap_refit_jet04_pT20 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04pT20 node not found on node tree" << endl;
  }

  //SvtxVertexMap
  _vtxmap_refit_jet04_chi2 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04Chi2");
  if (!_vtxmap_refit_jet04_chi2 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04Chi2 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_chi2_pT05 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04Chi2pT05");
  if (!_vtxmap_refit_jet04_chi2_pT05 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04Chi2pT05 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_chi2_pT10 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04Chi2pT10");
  if (!_vtxmap_refit_jet04_chi2_pT10 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04Chi2pT10 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_chi2_pT15 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04Chi2pT15");
  if (!_vtxmap_refit_jet04_chi2_pT15 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04Chi2pT15 node not found on node tree" << endl;
  }

  _vtxmap_refit_jet04_chi2_pT20 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet04Chi2pT20");
  if (!_vtxmap_refit_jet04_chi2_pT20 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet04Chi2pT20 node not found on node tree" << endl;
  }
	*/

  //SvtxVertexMap
	/*
  _vtxmap_refit_jet10 = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet10");
  if (!_vtxmap_refit_jet10 && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet10 node not found on node tree" << endl;
  }
	*/

  //SvtxVertexMap
	/*
  _vtxmap_refit_jet10_iter = findNode::getClass<SvtxVertexMap>(topNode,"SvtxVertexMapRefitJet10Iter");
  if (!_vtxmap_refit_jet10_iter && _event<2)
  {
    cout << PHWHERE << " SvtxVertexMapRefitJet10Iter node not found on node tree" << endl;
  }
	*/

  //SvtxTrackMap
  _trkmap = findNode::getClass<SvtxTrackMap>(topNode,"SvtxTrackMap");
  if (!_trkmap && _event<2)
  {
    cout << PHWHERE << " SvtxTrackMap node not found on node tree" << endl;
  }

	/*
  //SvtxTrackMap
  _trkmap_refit = findNode::getClass<SvtxTrackMap>(topNode,"SvtxTrackMapRefit");
  if (!_trkmap_refit && _event<2)
  {
    cout << PHWHERE << " SvtxTrackMapRefit node not found on node tree" << endl;
  }

	// JetMap
	_jetmap04 = findNode::getClass<JetMap>(topNode,"AntiKt_Truth_r04");
	if (!_jetmap04 && _event < 2)
	{
		cout << PHWHERE << " AntiKt_Truth_r04 node not found on node tree" << endl;
	}
	*/

	// JetMap
	/*
	_jetmap10 = findNode::getClass<JetMap>(topNode,"AntiKt_Truth_r10");
	if (!_jetmap10 && _event < 2)
	{
		cout << PHWHERE << " AntiKt_Truth_r10 node not found on node tree" << endl;
	}
	*/


	/*
  //Svtx Clusters
  _clustermap = findNode::getClass<SvtxClusterMap>(topNode, "SvtxClusterMap");
  if (!_clustermap && _event < 2)
  {
    cout << PHWHERE
         << " SvtxClusterMap node not found on node tree"
         << endl;
  }
	*/


}



